// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCourseMaterials = `-- name: GetCourseMaterials :many
SELECT id, name, course_id, storage_key FROM course_materials
`

type GetCourseMaterialsRow struct {
	ID         pgtype.UUID
	Name       string
	CourseID   pgtype.UUID
	StorageKey pgtype.UUID
}

func (q *Queries) GetCourseMaterials(ctx context.Context) ([]GetCourseMaterialsRow, error) {
	rows, err := q.db.Query(ctx, getCourseMaterials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourseMaterialsRow
	for rows.Next() {
		var i GetCourseMaterialsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CourseID,
			&i.StorageKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideos = `-- name: GetVideos :many
SELECT id, title, course_id, storage_key FROM videosections
`

type GetVideosRow struct {
	ID         pgtype.UUID
	Title      pgtype.Text
	CourseID   pgtype.UUID
	StorageKey pgtype.UUID
}

func (q *Queries) GetVideos(ctx context.Context) ([]GetVideosRow, error) {
	rows, err := q.db.Query(ctx, getVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosRow
	for rows.Next() {
		var i GetVideosRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CourseID,
			&i.StorageKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
